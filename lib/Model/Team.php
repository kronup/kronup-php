<?php

/**
 * Team Model
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 * @link      https://kronup.com/
 *
 * NOTE: This class is auto-generated by kronup.com
 * Do not edit this file manually!
 */

namespace Kronup\Model;
!defined("KRONUP-SDK") && exit();

/**
 * Team Model
 */
class Team extends AbstractModel {

    public const _D = null;
    protected static $_name = "Team";
    protected static $_definition = [
        "id" => ["id", "string", null, "getId", "setId", null, ["r" => 0]], 
        "orgId" => ["orgId", "string", null, "getOrgId", "setOrgId", null, ["r" => 0]], 
        "teamName" => ["teamName", "string", null, "getTeamName", "setTeamName", null, ["r" => 0, "nl" => 3, "xl" => 64]], 
        "teamDesc" => ["teamDesc", "string", null, "getTeamDesc", "setTeamDesc", null, ["r" => 0, "nl" => 0, "xl" => 256]], 
        "channels" => ["channels", "\Kronup\Model\TeamChannel[]", null, "getChannels", "setChannels", null, ["r" => 0, "c" => 1]], 
        "createdAt" => ["createdAt", "string", null, "getCreatedAt", "setCreatedAt", null, ["r" => 0]], 
        "updatedAt" => ["updatedAt", "string", null, "getUpdatedAt", "setUpdatedAt", null, ["r" => 0]]
    ];

    /**
     * Team
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }


    /**
     * Get id
     *
     * @return string|null
     */
    public function getId(): ?string {
        return $this->_data["id"];
    }

    /**
     * Set id
     * 
     * @param string|null $id Team ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setId($id) {
        return $this->_set("id", $id);
    }

    /**
     * Get orgId
     *
     * @return string|null
     */
    public function getOrgId(): ?string {
        return $this->_data["orgId"];
    }

    /**
     * Set orgId
     * 
     * @param string|null $org_id Organization ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setOrgId($org_id) {
        return $this->_set("orgId", $org_id);
    }

    /**
     * Get teamName
     *
     * @return string|null
     */
    public function getTeamName(): ?string {
        return $this->_data["teamName"];
    }

    /**
     * Set teamName
     * 
     * @param string|null $team_name Team name
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setTeamName($team_name) {
        return $this->_set("teamName", $team_name);
    }

    /**
     * Get teamDesc
     *
     * @return string|null
     */
    public function getTeamDesc(): ?string {
        return $this->_data["teamDesc"];
    }

    /**
     * Set teamDesc
     * 
     * @param string|null $team_desc Team description
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setTeamDesc($team_desc) {
        return $this->_set("teamDesc", $team_desc);
    }

    /**
     * Get channels
     *
     * @return \Kronup\Model\TeamChannel[]|null
     */
    public function getChannels(): ?array {
        return $this->_data["channels"];
    }

    /**
     * Set channels
     * 
     * @param \Kronup\Model\TeamChannel[]|null $channels Team channels
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setChannels(?array $channels) {
        return $this->_set("channels", $channels);
    }

    /**
     * Get createdAt
     *
     * @return string|null
     */
    public function getCreatedAt(): ?string {
        return $this->_data["createdAt"];
    }

    /**
     * Set createdAt
     * 
     * @param string|null $created_at Created timestamp
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setCreatedAt($created_at) {
        return $this->_set("createdAt", $created_at);
    }

    /**
     * Get updatedAt
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string {
        return $this->_data["updatedAt"];
    }

    /**
     * Set updatedAt
     * 
     * @param string|null $updated_at Updated timestamp
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setUpdatedAt($updated_at) {
        return $this->_set("updatedAt", $updated_at);
    }
}
