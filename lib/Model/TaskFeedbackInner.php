<?php

/**
 * Task_feedback_inner Model
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 * @link      https://kronup.com/
 *
 * NOTE: This class is auto-generated by kronup.com
 * Do not edit this file manually!
 */

namespace Kronup\Model;
!defined("KRONUP-SDK") && exit();

/**
 * Task_feedback_inner Model
 */
class TaskFeedbackInner extends AbstractModel {

    public const _D = null;
    public const ISSUE_V = 'v';
    public const ISSUE_C = 'c';
    public const ISSUE_F = 'f';
    public const ISSUE_T = 't';
    public const ISSUE_S = 's';
    public const ISSUE_CI = 'ci';
    public const ISSUE_ST = 'st';
    public const ISSUE_M = 'm';
    protected static $_name = "Task_feedback_inner";
    protected static $_definition = [
        "authorId" => ["authorId", "string", null, "getAuthorId", "setAuthorId", null, ["r" => 0]], 
        "issue" => ["issue", "string", null, "getIssue", "setIssue", 'v', ["r" => 0, "e" => 1]], 
        "message" => ["message", "string", null, "getMessage", "setMessage", null, ["r" => 0, "nl" => 1, "xl" => 512]], 
        "reply" => ["reply", "string", null, "getReply", "setReply", null, ["r" => 0, "nl" => 1, "xl" => 512]], 
        "iteration" => ["iteration", "float", null, "getIteration", "setIteration", null, ["r" => 0]]
    ];

    /**
     * TaskFeedbackInner
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }

    /**
     * Get allowable values
     *
     * @return string[]
     */
    public function getIssueAllowableValues(): array {
        return [
            self::ISSUE_V,
            self::ISSUE_C,
            self::ISSUE_F,
            self::ISSUE_T,
            self::ISSUE_S,
            self::ISSUE_CI,
            self::ISSUE_ST,
            self::ISSUE_M,
        ];
    }

    /**
     * Get authorId
     *
     * @return string|null
     */
    public function getAuthorId(): ?string {
        return $this->_data["authorId"];
    }

    /**
     * Set authorId
     * 
     * @param string|null $author_id Author ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setAuthorId($author_id) {
        return $this->_set("authorId", $author_id);
    }

    /**
     * Get issue
     *
     * @return string|null
     */
    public function getIssue(): ?string {
        return $this->_data["issue"];
    }

    /**
     * Set issue
     * 
     * @param string|null $issue Feedback issue <ul> <li>`v` - Value</li> <li>`c` - Complexity</li> <li>`f` - Flexibility</li> <li>`t` - Testing</li> <li>`s` - Security</li> <li>`ci` - CI/CD</li> <li>`st` - Standards</li> <li>`m` - Miscellaneous</li> </ul>
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setIssue($issue) {
        return $this->_set("issue", $issue);
    }

    /**
     * Get message
     *
     * @return string|null
     */
    public function getMessage(): ?string {
        return $this->_data["message"];
    }

    /**
     * Set message
     * 
     * @param string|null $message Feedback details
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setMessage($message) {
        return $this->_set("message", $message);
    }

    /**
     * Get reply
     *
     * @return string|null
     */
    public function getReply(): ?string {
        return $this->_data["reply"];
    }

    /**
     * Set reply
     * 
     * @param string|null $reply Feedback reply from task assignee
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setReply($reply) {
        return $this->_set("reply", $reply);
    }

    /**
     * Get iteration
     *
     * @return float|null
     */
    public function getIteration(): ?float {
        return $this->_data["iteration"];
    }

    /**
     * Set iteration
     * 
     * @param float|null $iteration Iteration number
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setIteration($iteration) {
        return $this->_set("iteration", $iteration);
    }
}
