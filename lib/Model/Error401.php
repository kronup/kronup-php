<?php

/**
 * Error401 Model
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 * @link      https://kronup.com/
 *
 * NOTE: This class is auto-generated by kronup.com
 * Do not edit this file manually!
 */

namespace Kronup\Model;
!defined("KRONUP-SDK") && exit();

/**
 * Error401 Model
 * 
 * @description Unauthorized error
 */
class Error401 extends AbstractModel {

    public const _D = null;
    protected static $_name = "Error401";
    protected static $_definition = [
        "id" => ["id", "string", null, "getId", "setId", null, ["r" => 1]], 
        "message" => ["message", "string", null, "getMessage", "setMessage", null, ["r" => 1]]
    ];

    /**
     * Error401
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }


    /**
     * Get id
     *
     * @return string
     */
    public function getId(): string {
        return $this->_data["id"];
    }

    /**
     * Set id
     * 
     * @param string $id Unique lowercase string that identifies this 401 error
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setId( $id) {
        return $this->_set("id", $id);
    }

    /**
     * Get message
     *
     * @return string
     */
    public function getMessage(): string {
        return $this->_data["message"];
    }

    /**
     * Set message
     * 
     * @param string $message 401 Error message (supports i18n)
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setMessage( $message) {
        return $this->_set("message", $message);
    }
}
