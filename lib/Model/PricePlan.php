<?php

/**
 * PricePlan Model
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 * @link      https://php.kronup.com/
 *
 * NOTE: This class is auto-generated by Kronup
 * Do not edit this file manually!
 */

namespace Kronup\Model;
!defined("KRONUP-SDK") && exit();

/**
 * PricePlan Model
 */
class PricePlan extends AbstractModel {

    public const _D = null;
    public const INTERVAL_DAY = 'day';
    public const INTERVAL_WEEK = 'week';
    public const INTERVAL_MONTH = 'month';
    public const INTERVAL_YEAR = 'year';
    public const TRIAL_INTERVAL_DAY = 'day';
    public const TRIAL_INTERVAL_WEEK = 'week';
    public const TRIAL_INTERVAL_MONTH = 'month';
    public const TRIAL_INTERVAL_YEAR = 'year';
    protected static $_name = "PricePlan";
    protected static $_definition = [
        "id" => ["id", "string", null, "getId", "setId", null, ["r" => 0]], 
        "slug" => ["slug", "string", null, "getSlug", "setSlug", null, ["r" => 0]], 
        "price" => ["price", "int", null, "getPrice", "setPrice", null, ["r" => 0, "n" => [0]]], 
        "interval" => ["interval", "string", null, "getInterval", "setInterval", 'month', ["r" => 0, "e" => 1]], 
        "intervalCount" => ["intervalCount", "int", null, "getIntervalCount", "setIntervalCount", null, ["r" => 0, "n" => [1]]], 
        "trialEnabled" => ["trialEnabled", "bool", null, "getTrialEnabled", "setTrialEnabled", false, ["r" => 0]], 
        "trialInterval" => ["trialInterval", "string", null, "getTrialInterval", "setTrialInterval", 'day', ["r" => 0, "e" => 1]], 
        "trialIntervalCount" => ["trialIntervalCount", "int", null, "getTrialIntervalCount", "setTrialIntervalCount", 30, ["r" => 0, "n" => [1]]], 
        "productId" => ["productId", "int", null, "getProductId", "setProductId", null, ["r" => 0, "n" => [1]]], 
        "variantId" => ["variantId", "int", null, "getVariantId", "setVariantId", null, ["r" => 0, "n" => [1]]], 
        "productName" => ["productName", "string", null, "getProductName", "setProductName", null, ["r" => 0]], 
        "productDesc" => ["productDesc", "string", null, "getProductDesc", "setProductDesc", null, ["r" => 0]], 
        "isExtra" => ["isExtra", "bool", null, "getIsExtra", "setIsExtra", false, ["r" => 0]], 
        "isEnabled" => ["isEnabled", "bool", null, "getIsEnabled", "setIsEnabled", false, ["r" => 0]], 
        "usersMax" => ["usersMax", "int", null, "getUsersMax", "setUsersMax", 0, ["r" => 0, "n" => [0], "x" => [500]]]
    ];

    /**
     * PricePlan
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }

    /**
     * Get allowable values
     *
     * @return string[]
     */
    public function getIntervalAllowableValues(): array {
        return [
            self::INTERVAL_DAY,
            self::INTERVAL_WEEK,
            self::INTERVAL_MONTH,
            self::INTERVAL_YEAR,
        ];
    }
    /**
     * Get allowable values
     *
     * @return string[]
     */
    public function getTrialIntervalAllowableValues(): array {
        return [
            self::TRIAL_INTERVAL_DAY,
            self::TRIAL_INTERVAL_WEEK,
            self::TRIAL_INTERVAL_MONTH,
            self::TRIAL_INTERVAL_YEAR,
        ];
    }

    /**
     * Get id - Price Plan ID
     *
     * @return string|null
     */
    public function getId(): ?string {
        return $this->_data["id"];
    }

    /**
     * Set id - Price Plan ID
     * 
     * @param string|null $id Price Plan ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setId($id) {
        return $this->_set("id", $id);
    }

    /**
     * Get slug - Variant slug
     *
     * @return string|null
     */
    public function getSlug(): ?string {
        return $this->_data["slug"];
    }

    /**
     * Set slug - Variant slug
     * 
     * @param string|null $slug Variant slug
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setSlug($slug) {
        return $this->_set("slug", $slug);
    }

    /**
     * Get price - Price expressed in cents
     *
     * @return int|null
     */
    public function getPrice(): ?int {
        return $this->_data["price"];
    }

    /**
     * Set price - Price expressed in cents
     * 
     * @param int|null $price Price expressed in cents
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setPrice($price) {
        return $this->_set("price", $price);
    }

    /**
     * Get interval - Subscription interval type
     *
     * @return string|null
     */
    public function getInterval(): ?string {
        return $this->_data["interval"];
    }

    /**
     * Set interval - Subscription interval type
     * 
     * @param string|null $interval Subscription interval type
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setInterval($interval) {
        return $this->_set("interval", $interval);
    }

    /**
     * Get intervalCount - Subscription interval count
     *
     * @return int|null
     */
    public function getIntervalCount(): ?int {
        return $this->_data["intervalCount"];
    }

    /**
     * Set intervalCount - Subscription interval count
     * 
     * @param int|null $interval_count Subscription interval count
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setIntervalCount($interval_count) {
        return $this->_set("intervalCount", $interval_count);
    }

    /**
     * Get trialEnabled - Subscription free trial enabled
     *
     * @return bool|null
     */
    public function getTrialEnabled(): ?bool {
        return $this->_data["trialEnabled"];
    }

    /**
     * Set trialEnabled - Subscription free trial enabled
     * 
     * @param bool|null $trial_enabled Subscription free trial enabled
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setTrialEnabled($trial_enabled) {
        return $this->_set("trialEnabled", $trial_enabled);
    }

    /**
     * Get trialInterval - Subscription trial interval type
     *
     * @return string|null
     */
    public function getTrialInterval(): ?string {
        return $this->_data["trialInterval"];
    }

    /**
     * Set trialInterval - Subscription trial interval type
     * 
     * @param string|null $trial_interval Subscription trial interval type
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setTrialInterval($trial_interval) {
        return $this->_set("trialInterval", $trial_interval);
    }

    /**
     * Get trialIntervalCount - Subscription trial interval count
     *
     * @return int|null
     */
    public function getTrialIntervalCount(): ?int {
        return $this->_data["trialIntervalCount"];
    }

    /**
     * Set trialIntervalCount - Subscription trial interval count
     * 
     * @param int|null $trial_interval_count Subscription trial interval count
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setTrialIntervalCount($trial_interval_count) {
        return $this->_set("trialIntervalCount", $trial_interval_count);
    }

    /**
     * Get productId - Product ID
     *
     * @return int|null
     */
    public function getProductId(): ?int {
        return $this->_data["productId"];
    }

    /**
     * Set productId - Product ID
     * 
     * @param int|null $product_id Product ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setProductId($product_id) {
        return $this->_set("productId", $product_id);
    }

    /**
     * Get variantId - Variant ID
     *
     * @return int|null
     */
    public function getVariantId(): ?int {
        return $this->_data["variantId"];
    }

    /**
     * Set variantId - Variant ID
     * 
     * @param int|null $variant_id Variant ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setVariantId($variant_id) {
        return $this->_set("variantId", $variant_id);
    }

    /**
     * Get productName - Product name
     *
     * @return string|null
     */
    public function getProductName(): ?string {
        return $this->_data["productName"];
    }

    /**
     * Set productName - Product name
     * 
     * @param string|null $product_name Product name
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setProductName($product_name) {
        return $this->_set("productName", $product_name);
    }

    /**
     * Get productDesc - Product description (HTML)
     *
     * @return string|null
     */
    public function getProductDesc(): ?string {
        return $this->_data["productDesc"];
    }

    /**
     * Set productDesc - Product description (HTML)
     * 
     * @param string|null $product_desc Product description (HTML)
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setProductDesc($product_desc) {
        return $this->_set("productDesc", $product_desc);
    }

    /**
     * Get isExtra - Extra variant for large companies
     *
     * @return bool|null
     */
    public function getIsExtra(): ?bool {
        return $this->_data["isExtra"];
    }

    /**
     * Set isExtra - Extra variant for large companies
     * 
     * @param bool|null $is_extra Extra variant for large companies
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setIsExtra($is_extra) {
        return $this->_set("isExtra", $is_extra);
    }

    /**
     * Get isEnabled - Variant is enabled
     *
     * @return bool|null
     */
    public function getIsEnabled(): ?bool {
        return $this->_data["isEnabled"];
    }

    /**
     * Set isEnabled - Variant is enabled
     * 
     * @param bool|null $is_enabled Variant is enabled
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setIsEnabled($is_enabled) {
        return $this->_set("isEnabled", $is_enabled);
    }

    /**
     * Get usersMax - Maximum number of users in this variant
     *
     * @return int|null
     */
    public function getUsersMax(): ?int {
        return $this->_data["usersMax"];
    }

    /**
     * Set usersMax - Maximum number of users in this variant
     * 
     * @param int|null $users_max Maximum number of users in this variant
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setUsersMax($users_max) {
        return $this->_set("usersMax", $users_max);
    }
}
