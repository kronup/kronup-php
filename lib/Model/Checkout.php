<?php

/**
 * Checkout Model
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 * @link      https://php.kronup.com/
 *
 * NOTE: This class is auto-generated by Kronup
 * Do not edit this file manually!
 */

namespace Kronup\Model;
!defined("KRONUP-SDK") && exit();

/**
 * Checkout Model
 */
class Checkout extends AbstractModel {

    public const _D = null;
    protected static $_name = "Checkout";
    protected static $_definition = [
        "id" => ["id", "string", null, "getId", "setId", null, ["r" => 0]], 
        "productId" => ["productId", "int", null, "getProductId", "setProductId", null, ["r" => 0, "n" => [1]]], 
        "variantId" => ["variantId", "int", null, "getVariantId", "setVariantId", null, ["r" => 0, "n" => [1]]], 
        "darkMode" => ["darkMode", "bool", null, "getDarkMode", "setDarkMode", false, ["r" => 0]], 
        "url" => ["url", "string", null, "getUrl", "setUrl", null, ["r" => 0]], 
        "expiresAt" => ["expiresAt", "string", null, "getExpiresAt", "setExpiresAt", null, ["r" => 0]]
    ];

    /**
     * Checkout
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }


    /**
     * Get id - Checkout ID
     *
     * @return string|null
     */
    public function getId(): ?string {
        return $this->_data["id"];
    }

    /**
     * Set id - Checkout ID
     * 
     * @param string|null $id Checkout ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setId($id) {
        return $this->_set("id", $id);
    }

    /**
     * Get productId - Product ID
     *
     * @return int|null
     */
    public function getProductId(): ?int {
        return $this->_data["productId"];
    }

    /**
     * Set productId - Product ID
     * 
     * @param int|null $product_id Product ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setProductId($product_id) {
        return $this->_set("productId", $product_id);
    }

    /**
     * Get variantId - Variant ID
     *
     * @return int|null
     */
    public function getVariantId(): ?int {
        return $this->_data["variantId"];
    }

    /**
     * Set variantId - Variant ID
     * 
     * @param int|null $variant_id Variant ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setVariantId($variant_id) {
        return $this->_set("variantId", $variant_id);
    }

    /**
     * Get darkMode - Use dark mode
     *
     * @return bool|null
     */
    public function getDarkMode(): ?bool {
        return $this->_data["darkMode"];
    }

    /**
     * Set darkMode - Use dark mode
     * 
     * @param bool|null $dark_mode Use dark mode
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setDarkMode($dark_mode) {
        return $this->_set("darkMode", $dark_mode);
    }

    /**
     * Get url - Custom Checkout URL
     *
     * @return string|null
     */
    public function getUrl(): ?string {
        return $this->_data["url"];
    }

    /**
     * Set url - Custom Checkout URL
     * 
     * @param string|null $url Custom Checkout URL
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setUrl($url) {
        return $this->_set("url", $url);
    }

    /**
     * Get expiresAt - Expires timestamp
     *
     * @return string|null
     */
    public function getExpiresAt(): ?string {
        return $this->_data["expiresAt"];
    }

    /**
     * Set expiresAt - Expires timestamp
     * 
     * @param string|null $expires_at Expires timestamp
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setExpiresAt($expires_at) {
        return $this->_set("expiresAt", $expires_at);
    }
}
