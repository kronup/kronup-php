<?php

/**
 * MinuteDiscovery Model
 *
 * @copyright (c) 2022-2023 kronup.io
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 * @link      https://php.kronup.io/
 *
 * NOTE: This class is auto-generated by Kronup
 * Do not edit this file manually!
 */

namespace Kronup\Model;
!defined("KRONUP-SDK") && exit();

/**
 * MinuteDiscovery Model
 * 
 * Task discovery recorded in an iteration
 */
class MinuteDiscovery extends AbstractModel {

    public const _D = null;
    protected static $_name = "MinuteDiscovery";
    protected static $_definition = [
        "id" => ["id", "string", null, "getId", "setId", null, ["r" => 0]], 
        "iat" => ["iat", "float", null, "getIat", "setIat", null, ["r" => 0]], 
        "iteration" => ["iteration", "float", null, "getIteration", "setIteration", 1, ["r" => 0, "n" => [1]]], 
        "authorUserId" => ["authorUserId", "string", null, "getAuthorUserId", "setAuthorUserId", null, ["r" => 0]], 
        "details" => ["details", "string", null, "getDetails", "setDetails", null, ["r" => 0, "nl" => 0, "xl" => 512]]
    ];

    /**
     * MinuteDiscovery
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }


    /**
     * Get id - Discovery ID
     *
     * @return string|null
     */
    public function getId(): ?string {
        return $this->_data["id"];
    }

    /**
     * Set id - Discovery ID
     * 
     * @param string|null $id Discovery ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setId($id) {
        return $this->_set("id", $id);
    }

    /**
     * Get iat - Issued at time
     *
     * @return float|null
     */
    public function getIat(): ?float {
        return $this->_data["iat"];
    }

    /**
     * Set iat - Issued at time
     * 
     * @param float|null $iat Issued at time
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setIat($iat) {
        return $this->_set("iat", $iat);
    }

    /**
     * Get iteration - Iteration number
     *
     * @return float|null
     */
    public function getIteration(): ?float {
        return $this->_data["iteration"];
    }

    /**
     * Set iteration - Iteration number
     * 
     * @param float|null $iteration Iteration number
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setIteration($iteration) {
        return $this->_set("iteration", $iteration);
    }

    /**
     * Get authorUserId - User ID
     *
     * @return string|null
     */
    public function getAuthorUserId(): ?string {
        return $this->_data["authorUserId"];
    }

    /**
     * Set authorUserId - User ID
     * 
     * @param string|null $author_user_id User ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setAuthorUserId($author_user_id) {
        return $this->_set("authorUserId", $author_user_id);
    }

    /**
     * Get details - Discovery details
     *
     * @return string|null
     */
    public function getDetails(): ?string {
        return $this->_data["details"];
    }

    /**
     * Set details - Discovery details
     * 
     * @param string|null $details Discovery details
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setDetails($details) {
        return $this->_set("details", $details);
    }
}
