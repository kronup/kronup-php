<?php

/**
 * UserRoles Model
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 * @link      https://kronup.com/
 *
 * NOTE: This class is auto-generated by kronup.com
 * Do not edit this file manually!
 */

namespace Kronup\Model;
!defined("KRONUP-SDK") && exit();

/**
 * UserRoles Model
 */
class UserRoles extends AbstractModel {

    public const _D = null;
    public const ROLE_SITE_ADMIN = 'admin';
    public const ROLE_SITE_MODERATOR = 'moderator';
    public const ROLE_SITE_USER = 'user';
    public const ROLE_ORG_OWNER = 'owner';
    public const ROLE_ORG_MANAGER = 'manager';
    public const ROLE_ORG_MEMBER = 'member';
    protected static $_name = "UserRoles";
    protected static $_definition = [
        "role_site" => ["roleSite", "string", null, "getRoleSite", "setRoleSite", null, ["r" => 0, "e" => 1]], 
        "role_org" => ["roleOrg", "string", null, "getRoleOrg", "setRoleOrg", null, ["r" => 0, "e" => 1]]
    ];

    /**
     * UserRoles
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }

    /**
     * Get allowable values
     *
     * @return string[]
     */
    public function getRoleSiteAllowableValues(): array {
        return [
            self::ROLE_SITE_ADMIN,
            self::ROLE_SITE_MODERATOR,
            self::ROLE_SITE_USER,
        ];
    }
    /**
     * Get allowable values
     *
     * @return string[]
     */
    public function getRoleOrgAllowableValues(): array {
        return [
            self::ROLE_ORG_OWNER,
            self::ROLE_ORG_MANAGER,
            self::ROLE_ORG_MEMBER,
        ];
    }

    /**
     * Get role_site
     *
     * @return string|null
     */
    public function getRoleSite(): ?string {
        return $this->_data["role_site"];
    }

    /**
     * Set role_site
     * 
     * @param string|null $role_site User site role
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setRoleSite( $role_site) {
        return $this->_set("role_site", $role_site);
    }

    /**
     * Get role_org
     *
     * @return string|null
     */
    public function getRoleOrg(): ?string {
        return $this->_data["role_org"];
    }

    /**
     * Set role_org
     * 
     * @param string|null $role_org User organization role
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setRoleOrg( $role_org) {
        return $this->_set("role_org", $role_org);
    }
}
