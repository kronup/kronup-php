<?php

/**
 * ValueItemChange Model
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 * @link      https://kronup.com/
 *
 * NOTE: This class is auto-generated by kronup.com
 * Do not edit this file manually!
 */

namespace Kronup\Model;
!defined("KRONUP-SDK") && exit();

/**
 * ValueItemChange Model
 */
class ValueItemChange extends AbstractModel {

    public const _D = null;
    public const CHANGED_STAGE = 'stage';
    public const CHANGED_TYPE = 'type';
    public const CHANGED_PRIORITY = 'priority';
    protected static $_name = "ValueItemChange";
    protected static $_definition = [
        "authorId" => ["authorId", "string", null, "getAuthorId", "setAuthorId", null, ["r" => 0]], 
        "changed" => ["changed", "string", null, "getChanged", "setChanged", null, ["r" => 0, "e" => 1]], 
        "old" => ["old", "string", null, "getOld", "setOld", null, ["r" => 0]], 
        "new" => ["new", "string", null, "getNew", "setNew", null, ["r" => 0]], 
        "time" => ["time", "float", null, "getTime", "setTime", null, ["r" => 0]]
    ];

    /**
     * ValueItemChange
     *
     * @param mixed[] $data Model data
     */
    public function __construct(array $data = []) {
        foreach(static::$_definition as $k => $v) {
            $this->_data[$k] = isset($data[$k]) ? $data[$k] : $v[5];
        }
    }

    /**
     * Get allowable values
     *
     * @return string[]
     */
    public function getChangedAllowableValues(): array {
        return [
            self::CHANGED_STAGE,
            self::CHANGED_TYPE,
            self::CHANGED_PRIORITY,
        ];
    }

    /**
     * Get authorId
     *
     * @return string|null
     */
    public function getAuthorId(): ?string {
        return $this->_data["authorId"];
    }

    /**
     * Set authorId
     * 
     * @param string|null $author_id Author ID
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setAuthorId($author_id) {
        return $this->_set("authorId", $author_id);
    }

    /**
     * Get changed
     *
     * @return string|null
     */
    public function getChanged(): ?string {
        return $this->_data["changed"];
    }

    /**
     * Set changed
     * 
     * @param string|null $changed Property that was changed
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setChanged($changed) {
        return $this->_set("changed", $changed);
    }

    /**
     * Get old
     *
     * @return string|null
     */
    public function getOld(): ?string {
        return $this->_data["old"];
    }

    /**
     * Set old
     * 
     * @param string|null $old Old value
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setOld($old) {
        return $this->_set("old", $old);
    }

    /**
     * Get new
     *
     * @return string|null
     */
    public function getNew(): ?string {
        return $this->_data["new"];
    }

    /**
     * Set new
     * 
     * @param string|null $new New value
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setNew($new) {
        return $this->_set("new", $new);
    }

    /**
     * Get time
     *
     * @return float|null
     */
    public function getTime(): ?float {
        return $this->_data["time"];
    }

    /**
     * Set time
     * 
     * @param float|null $time UNIX timestamp of change
     * @throws \InvalidArgumentException
     * @return $this
     */
    public function setTime($time) {
        return $this->_set("time", $time);
    }
}
