<?php

/**
 * Implementation of Channels API
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 *
 * NOTE: This class is auto-generated by kronup.com
 * Do not edit this file manually!
 */

namespace Kronup\Api;
!defined("KRONUP-SDK") && exit();

use InvalidArgumentException as IAE;
use Kronup\Sdk\Serializer as S;

/**
 * API for Channels
 */
class ChannelsApi extends AbstractApi {
    
    /**
     * API package
     */
    const PKG = "Channels";

    /**
     * Assign to channel
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $user_id User ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\User
     */
    public function channelAssign($team_id, $channel_id, $user_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/users/{userId}";
        
        /** @var \Kronup\Model\User $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "PUT", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "userId" => $user_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\User"
        );
            
        return $result;
    }
    
    /**
     * Create channel
     *
     * @param string $team_id Team ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\ChannelCreateRequest $channel_create_request 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Team
     */
    public function channelCreate($team_id, $x_org_id, $channel_create_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels";
        
        /** @var \Kronup\Model\Team $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id]), $rPath, [], $rHeaders, [], $channel_create_request
            ), 
            "\Kronup\Model\Team"
        );
            
        return $result;
    }
    
    /**
     * Delete channel
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Team
     */
    public function channelDelete($team_id, $channel_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}";
        
        /** @var \Kronup\Model\Team $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Team"
        );
            
        return $result;
    }
    
    /**
     * Unassign from channel
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $user_id User ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\User
     */
    public function channelUnassign($team_id, $channel_id, $user_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/users/{userId}";
        
        /** @var \Kronup\Model\User $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "userId" => $user_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\User"
        );
            
        return $result;
    }
    
    /**
     * Update channel
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\ChannelCreateRequest $channel_create_request 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Team
     */
    public function channelUpdate($team_id, $channel_id, $x_org_id, $channel_create_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}";
        
        /** @var \Kronup\Model\Team $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id]), $rPath, [], $rHeaders, [], $channel_create_request
            ), 
            "\Kronup\Model\Team"
        );
            
        return $result;
    }
    
}
