<?php

/**
 * Implementation of DeepContext API
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 *
 * NOTE: This class is auto-generated by Kronup
 * Do not edit this file manually!
 */

namespace Kronup\Api;
!defined("KRONUP-SDK") && exit();

use InvalidArgumentException as IAE;
use Kronup\Sdk\Serializer as S;

/**
 * API for DeepContext
 */
class DeepContextApi extends AbstractApi {
    
    /**
     * API package
     */
    const PKG = "Deep Context";

    /**
     * Delete feature
     *
     * @param string $feature_id Feature ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return bool
     */
    public function delete($feature_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/deep-context/{featureId}";
        
        /** @var bool $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["featureId" => $feature_id]), $rPath, [], $rHeaders, []
            ), 
            "bool"
        );
            
        return $result;
    }
    
    /**
     * Fetch expanded feature
     *
     * @param string $feature_id Feature ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\FeatureExpanded
     */
    public function read($feature_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/deep-context/{featureId}";
        
        /** @var \Kronup\Model\FeatureExpanded $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", S::parse($rPath, ["featureId" => $feature_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\FeatureExpanded"
        );
            
        return $result;
    }
    
    /**
     * Search features
     *
     * @param string|null $search_term Search term
     * @param int|1 $page_number 
     * @param int|500 $page_size 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\DeepContextList
     */
    public function search($search_term = null, $page_number = 1, $page_size = 500) {
        if (isset($page_number) && $page_number < 1) {
            throw new IAE('Invalid value for "$page_number" when calling DeepContextApi., must be bigger than or equal to 1.');
        }

        if (isset($page_size) && $page_size > 1500) {
            throw new IAE('Invalid value for "$page_size" when calling DeepContextApi., must be smaller than or equal to 1500');
        }

        if (isset($page_size) && $page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling DeepContextApi., must be bigger than or equal to 1.');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/deep-context";
        
        /** @var \Kronup\Model\DeepContextList $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", $rPath, $rPath, [
                    "searchTerm" => isset($search_term) ? S::toQueryValue($search_term) : null,
                    "pageNumber" => S::toQueryValue($page_number),
                    "pageSize" => S::toQueryValue($page_size),
                ], $rHeaders, []
            ), 
            "\Kronup\Model\DeepContextList"
        );
            
        return $result;
    }
    
}
