<?php

/**
 * Implementation of Billing API
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 *
 * NOTE: This class is auto-generated by Kronup
 * Do not edit this file manually!
 */

namespace Kronup\Api;
!defined("KRONUP-SDK") && exit();

use InvalidArgumentException as IAE;
use Kronup\Sdk\Serializer as S;

/**
 * API for Billing
 */
class BillingApi extends AbstractApi {
    
    /**
     * API package
     */
    const PKG = "Billing";

    /**
     * List Invoices
     *
     * @param int|1 $page_number 
     * @param int|500 $page_size 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\InvoiceList
     */
    public function invoiceList($page_number = 1, $page_size = 500) {
        if (isset($page_number) && $page_number < 1) {
            throw new IAE('Invalid value for "$page_number" when calling BillingApi., must be bigger than or equal to 1.');
        }

        if (isset($page_size) && $page_size > 1500) {
            throw new IAE('Invalid value for "$page_size" when calling BillingApi., must be smaller than or equal to 1500');
        }

        if (isset($page_size) && $page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling BillingApi., must be bigger than or equal to 1.');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/billing/invoices";
        
        /** @var \Kronup\Model\InvoiceList $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", $rPath, $rPath, [
                    "pageNumber" => S::toQueryValue($page_number),
                    "pageSize" => S::toQueryValue($page_size),
                ], $rHeaders, []
            ), 
            "\Kronup\Model\InvoiceList"
        );
            
        return $result;
    }
    
    /**
     * Prepare Checkout
     *
     * @param string $price_plan_id Price Plan ID
     * @param int|0 $dark_mode Use dark mode
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Checkout
     */
    public function planCheckout($price_plan_id, $dark_mode = 0) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/billing/price-plans/{pricePlanId}";
        
        /** @var \Kronup\Model\Checkout $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", S::parse($rPath, ["pricePlanId" => $price_plan_id]), $rPath, [
                    "darkMode" => S::toQueryValue($dark_mode),
                ], $rHeaders, []
            ), 
            "\Kronup\Model\Checkout"
        );
            
        return $result;
    }
    
    /**
     * List Price Plans
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\PricePlanList
     */
    public function planList() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/billing/price-plans";
        
        /** @var \Kronup\Model\PricePlanList $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", $rPath, $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\PricePlanList"
        );
            
        return $result;
    }
    
    /**
     * Cancel Subscription
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Subscription
     */
    public function subscriptionCancel() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/billing/subscription";
        
        /** @var \Kronup\Model\Subscription $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", $rPath, $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Subscription"
        );
            
        return $result;
    }
    
    /**
     * Fetch Subscription
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\SubscriptionNullable
     */
    public function subscriptionRead() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/billing/subscription";
        
        /** @var \Kronup\Model\SubscriptionNullable $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", $rPath, $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\SubscriptionNullable"
        );
            
        return $result;
    }
    
    /**
     * Update Subscription
     *
     * @param string $price_plan_id Price Plan ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Subscription
     */
    public function subscriptionUpdate($price_plan_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/billing/subscription/price-plans/{pricePlanId}";
        
        /** @var \Kronup\Model\Subscription $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "PUT", S::parse($rPath, ["pricePlanId" => $price_plan_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Subscription"
        );
            
        return $result;
    }
    
}
