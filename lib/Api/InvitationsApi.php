<?php

/**
 * Implementation of Invitations API
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 *
 * NOTE: This class is auto-generated by kronup.com
 * Do not edit this file manually!
 */

namespace Kronup\Api;
!defined("KRONUP-SDK") && exit();

use InvalidArgumentException as IAE;
use Kronup\Sdk\Serializer as S;

/**
 * API for Invitations
 */
class InvitationsApi extends AbstractApi {
    
    /**
     * API package
     */
    const PKG = "Invitations";

    /**
     * Accept invitation
     *
     * @param string $id Invitation ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Invitation
     */
    public function invitationAccept($id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/invitations/{id}";
        /** @var \Kronup\Model\Invitation $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "PUT", S::parse($rPath, ["id" => $id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Invitation"
        );
            
        return $result;
    }
    
    /**
     * Create invitation
     *
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\InvitationCreateRequest $invitation_create_request 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Invitation
     */
    public function invitationCreate($x_org_id, $invitation_create_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/invitations";
        /** @var \Kronup\Model\Invitation $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", $rPath, $rPath, [], $rHeaders, [], $invitation_create_request
            ), 
            "\Kronup\Model\Invitation"
        );
            
        return $result;
    }
    
    /**
     * Delete invitation
     *
     * @param string $id Invitation ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Invitation
     */
    public function invitationDelete($id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/invitations/{id}";
        /** @var \Kronup\Model\Invitation $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["id" => $id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Invitation"
        );
            
        return $result;
    }
    
    /**
     * List all invitations
     *
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Invitation[]
     */
    public function invitationList($x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/invitations";
        /** @var \Kronup\Model\Invitation[] $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", $rPath, $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Invitation[]"
        );
            
        return $result;
    }
    
    /**
     * Read invitation
     *
     * @param string $id Invitation ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Invitation
     */
    public function invitationRead($id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/invitations/{id}";
        /** @var \Kronup\Model\Invitation $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", S::parse($rPath, ["id" => $id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Invitation"
        );
            
        return $result;
    }
    
    /**
     * Update invitation
     *
     * @param string $id Invitation ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\InvitationUpdateRequest $invitation_update_request 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Invitation
     */
    public function invitationUpdate($id, $x_org_id, $invitation_update_request) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/invitations/{id}";
        /** @var \Kronup\Model\Invitation $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["id" => $id]), $rPath, [], $rHeaders, [], $invitation_update_request
            ), 
            "\Kronup\Model\Invitation"
        );
            
        return $result;
    }
    
}
