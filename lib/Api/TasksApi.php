<?php

/**
 * Implementation of Tasks API
 *
 * @copyright (c) 2022-2023 kronup.io
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 *
 * NOTE: This class is auto-generated by Kronup
 * Do not edit this file manually!
 */

namespace Kronup\Api;
!defined("KRONUP-SDK") && exit();

use InvalidArgumentException as IAE;
use Kronup\Sdk\Serializer as S;

/**
 * API for Tasks
 */
class TasksApi extends AbstractApi {
    
    /**
     * API package
     */
    const PKG = "Tasks";

    /**
     * Assign to user
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value item ID
     * @param string $task_id Task ID
     * @param string $user_id User ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function assign($team_id, $channel_id, $item_id, $task_id, $user_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/users/{userId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "PUT", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "userId" => $user_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Create task
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param \Kronup\Model\PayloadTaskCreate $payload_task_create 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\TaskExpanded
     */
    public function create($team_id, $channel_id, $item_id, $payload_task_create) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks";
        
        /** @var \Kronup\Model\TaskExpanded $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id]), $rPath, [], $rHeaders, [], $payload_task_create
            ), 
            "\Kronup\Model\TaskExpanded"
        );
            
        return $result;
    }
    
    /**
     * Delete task
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value item ID
     * @param string $task_id Task ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return bool
     */
    public function delete($team_id, $channel_id, $item_id, $task_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}";
        
        /** @var bool $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, []
            ), 
            "bool"
        );
            
        return $result;
    }
    
    /**
     * Create discovery
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param \Kronup\Model\PayloadTaskDiscoveryCreate $payload_task_discovery_create 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\MinuteDiscovery
     */
    public function discoveryCreate($team_id, $channel_id, $item_id, $task_id, $payload_task_discovery_create) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/discoveries";
        
        /** @var \Kronup\Model\MinuteDiscovery $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, [], $payload_task_discovery_create
            ), 
            "\Kronup\Model\MinuteDiscovery"
        );
            
        return $result;
    }
    
    /**
     * Delete discovery
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $discovery_id Discovery ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return bool
     */
    public function discoveryDelete($team_id, $channel_id, $item_id, $task_id, $discovery_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/discoveries/{discoveryId}";
        
        /** @var bool $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "discoveryId" => $discovery_id]), $rPath, [], $rHeaders, []
            ), 
            "bool"
        );
            
        return $result;
    }
    
    /**
     * Update discovery
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $discovery_id Discovery ID
     * @param \Kronup\Model\PayloadTaskDiscoveryUpdate $payload_task_discovery_update 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\MinuteDiscovery
     */
    public function discoveryUpdate($team_id, $channel_id, $item_id, $task_id, $discovery_id, $payload_task_discovery_update) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/discoveries/{discoveryId}";
        
        /** @var \Kronup\Model\MinuteDiscovery $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "discoveryId" => $discovery_id]), $rPath, [], $rHeaders, [], $payload_task_discovery_update
            ), 
            "\Kronup\Model\MinuteDiscovery"
        );
            
        return $result;
    }
    
    /**
     * Create feedback
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param \Kronup\Model\PayloadTaskFeedbackCreate $payload_task_feedback_create 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\MinuteFeedback
     */
    public function feedbackCreate($team_id, $channel_id, $item_id, $task_id, $payload_task_feedback_create) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback";
        
        /** @var \Kronup\Model\MinuteFeedback $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, [], $payload_task_feedback_create
            ), 
            "\Kronup\Model\MinuteFeedback"
        );
            
        return $result;
    }
    
    /**
     * Delete feedback
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $feedback_id Feedback ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return bool
     */
    public function feedbackDelete($team_id, $channel_id, $item_id, $task_id, $feedback_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback/{feedbackId}";
        
        /** @var bool $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "feedbackId" => $feedback_id]), $rPath, [], $rHeaders, []
            ), 
            "bool"
        );
            
        return $result;
    }
    
    /**
     * Reply to feedback
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $feedback_id Feedback ID
     * @param \Kronup\Model\PayloadTaskFeedbackReply $payload_task_feedback_reply 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\MinuteFeedback
     */
    public function feedbackReply($team_id, $channel_id, $item_id, $task_id, $feedback_id, $payload_task_feedback_reply) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback/{feedbackId}/reply";
        
        /** @var \Kronup\Model\MinuteFeedback $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "feedbackId" => $feedback_id]), $rPath, [], $rHeaders, [], $payload_task_feedback_reply
            ), 
            "\Kronup\Model\MinuteFeedback"
        );
            
        return $result;
    }
    
    /**
     * Update feedback
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $feedback_id Feedback ID
     * @param \Kronup\Model\PayloadTaskFeedbackUpdate $payload_task_feedback_update 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\MinuteFeedback
     */
    public function feedbackUpdate($team_id, $channel_id, $item_id, $task_id, $feedback_id, $payload_task_feedback_update) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback/{feedbackId}";
        
        /** @var \Kronup\Model\MinuteFeedback $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "feedbackId" => $feedback_id]), $rPath, [], $rHeaders, [], $payload_task_feedback_update
            ), 
            "\Kronup\Model\MinuteFeedback"
        );
            
        return $result;
    }
    
    /**
     * List tasks
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param int|1 $page_number 
     * @param int|500 $page_size 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\TasksList
     */
    public function list($team_id, $channel_id, $item_id, $page_number = 1, $page_size = 500) {
        if (isset($page_number) && $page_number < 1) {
            throw new IAE('Invalid value for "$page_number" when calling TasksApi., must be bigger than or equal to 1.');
        }

        if (isset($page_size) && $page_size > 1500) {
            throw new IAE('Invalid value for "$page_size" when calling TasksApi., must be smaller than or equal to 1500');
        }

        if (isset($page_size) && $page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling TasksApi., must be bigger than or equal to 1.');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks";
        
        /** @var \Kronup\Model\TasksList $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id]), $rPath, [
                    "pageNumber" => S::toQueryValue($page_number),
                    "pageSize" => S::toQueryValue($page_size),
                ], $rHeaders, []
            ), 
            "\Kronup\Model\TasksList"
        );
            
        return $result;
    }
    
    /**
     * List candidates
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value item ID
     * @param string $task_id Task ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\TaskCandidatesList
     */
    public function listCandidates($team_id, $channel_id, $item_id, $task_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/candidates";
        
        /** @var \Kronup\Model\TaskCandidatesList $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\TaskCandidatesList"
        );
            
        return $result;
    }
    
    /**
     * Fetch task
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value item ID
     * @param string $task_id Task ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\TaskExpanded
     */
    public function read($team_id, $channel_id, $item_id, $task_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}";
        
        /** @var \Kronup\Model\TaskExpanded $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\TaskExpanded"
        );
            
        return $result;
    }
    
    /**
     * Update task
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value item ID
     * @param string $task_id Task ID
     * @param \Kronup\Model\PayloadTaskUpdate $payload_task_update 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function update($team_id, $channel_id, $item_id, $task_id, $payload_task_update) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, [], $payload_task_update
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
}
