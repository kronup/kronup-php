<?php

/**
 * Implementation of Tasks API
 *
 * @copyright (c) 2022-2023 kronup.com
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 *
 * NOTE: This class is auto-generated by kronup.com
 * Do not edit this file manually!
 */

namespace Kronup\Api;
!defined("KRONUP-SDK") && exit();

use InvalidArgumentException as IAE;
use Kronup\Sdk\Serializer as S;

/**
 * API for Tasks
 */
class TasksApi extends AbstractApi {
    
    /**
     * API package
     */
    const PKG = "Tasks";

    /**
     * Assign to user
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value item ID
     * @param string $task_id Task ID
     * @param string $user_id User ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\TaskCore
     */
    public function taskAssign($team_id, $channel_id, $item_id, $task_id, $user_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/users/{userId}";
        
        /** @var \Kronup\Model\TaskCore $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "PUT", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "userId" => $user_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\TaskCore"
        );
            
        return $result;
    }
    
    /**
     * Create task
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\RequestTaskCreate $request_task_create 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskCreate($team_id, $channel_id, $item_id, $x_org_id, $request_task_create) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id]), $rPath, [], $rHeaders, [], $request_task_create
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Delete task
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value item ID
     * @param string $task_id Task ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskDelete($team_id, $channel_id, $item_id, $task_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Create discovery
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\RequestTaskDiscoveryCreate $request_task_discovery_create 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskDiscoveryCreate($team_id, $channel_id, $item_id, $task_id, $x_org_id, $request_task_discovery_create) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/discoveries";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, [], $request_task_discovery_create
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Remove discovery
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $discovery_id Discovery ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskDiscoveryRemove($team_id, $channel_id, $item_id, $task_id, $discovery_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/discoveries/{discoveryId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "discoveryId" => $discovery_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Update discovery
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $discovery_id Discovery ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\RequestTaskDiscoveryUpdate $request_task_discovery_update 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskDiscoveryUpdate($team_id, $channel_id, $item_id, $task_id, $discovery_id, $x_org_id, $request_task_discovery_update) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/discoveries/{discoveryId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "discoveryId" => $discovery_id]), $rPath, [], $rHeaders, [], $request_task_discovery_update
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Create feedback
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\RequestTaskFeedbackCreate $request_task_feedback_create 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskFeedbackCreate($team_id, $channel_id, $item_id, $task_id, $x_org_id, $request_task_feedback_create) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, [], $request_task_feedback_create
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Remove feedback
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $feedback_id Feedback ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskFeedbackRemove($team_id, $channel_id, $item_id, $task_id, $feedback_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback/{feedbackId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "feedbackId" => $feedback_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Reply to feedback
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $feedback_id Feedback ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\RequestTaskFeedbackReply $request_task_feedback_reply 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskFeedbackReply($team_id, $channel_id, $item_id, $task_id, $feedback_id, $x_org_id, $request_task_feedback_reply) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback/{feedbackId}/reply";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "feedbackId" => $feedback_id]), $rPath, [], $rHeaders, [], $request_task_feedback_reply
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Update feedback
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $feedback_id Feedback ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\RequestTaskFeedbackUpdate $request_task_feedback_update 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskFeedbackUpdate($team_id, $channel_id, $item_id, $task_id, $feedback_id, $x_org_id, $request_task_feedback_update) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/feedback/{feedbackId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "feedbackId" => $feedback_id]), $rPath, [], $rHeaders, [], $request_task_feedback_update
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Add keyword
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $keyword_id Keyword ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskKeywordAdd($team_id, $channel_id, $item_id, $task_id, $keyword_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/keywords/{keywordId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "PUT", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "keywordId" => $keyword_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Remove keyword
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $task_id Task ID
     * @param string $keyword_id Keyword ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskKeywordRemove($team_id, $channel_id, $item_id, $task_id, $keyword_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}/keywords/{keywordId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id, "keywordId" => $keyword_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * List tasks
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value Item ID
     * @param string $x_org_id Organization ID
     * @param int|1 $page_number Pagination: page number
     * @param int|100 $page_size Pagination: page size
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\TasksList
     */
    public function taskList($team_id, $channel_id, $item_id, $x_org_id, $page_number = 1, $page_size = 100) {
        if (isset($page_number) && $page_number < 1) {
            throw new IAE('Invalid value for "$page_number" when calling TasksApi.taskList, must be bigger than or equal to 1.');
        }

        if (isset($page_size) && $page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling TasksApi.taskList, must be bigger than or equal to 1.');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks";
        
        /** @var \Kronup\Model\TasksList $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id]), $rPath, [
                    "pageNumber" => S::toQueryValue($page_number),
                    "pageSize" => S::toQueryValue($page_size),
                ], $rHeaders, []
            ), 
            "\Kronup\Model\TasksList"
        );
            
        return $result;
    }
    
    /**
     * Fetch task
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value item ID
     * @param string $task_id Task ID
     * @param string $x_org_id Organization ID
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskRead($team_id, $channel_id, $item_id, $task_id, $x_org_id) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
    /**
     * Update task
     *
     * @param string $team_id Team ID
     * @param string $channel_id Channel ID
     * @param string $item_id Value item ID
     * @param string $task_id Task ID
     * @param string $x_org_id Organization ID
     * @param \Kronup\Model\RequestTaskUpdate $request_task_update 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Task
     */
    public function taskUpdate($team_id, $channel_id, $item_id, $task_id, $x_org_id, $request_task_update) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);
        $rHeaders = array_merge(
            [
                "x-org-id" => S::toHeaderValue($x_org_id),
            ], 
            $rHeaders
        );

        // Path template
        $rPath = "/teams/{teamId}/channels/{channelId}/items/{itemId}/tasks/{taskId}";
        
        /** @var \Kronup\Model\Task $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", S::parse($rPath, ["teamId" => $team_id, "channelId" => $channel_id, "itemId" => $item_id, "taskId" => $task_id]), $rPath, [], $rHeaders, [], $request_task_update
            ), 
            "\Kronup\Model\Task"
        );
            
        return $result;
    }
    
}
