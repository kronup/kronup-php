<?php

/**
 * Implementation of Account API
 *
 * @copyright (c) 2022-2023 kronup.io
 * @license   Apache 2.0
 * @package   Kronup
 * @author    Mark Jivko
 *
 * NOTE: This class is auto-generated by Kronup
 * Do not edit this file manually!
 */

namespace Kronup\Api;
!defined("KRONUP-SDK") && exit();

use InvalidArgumentException as IAE;
use Kronup\Sdk\Serializer as S;

/**
 * API for Account
 */
class AccountApi extends AbstractApi {
    
    /**
     * API package
     */
    const PKG = "Account";

    /**
     * Update avatar
     *
     * @param \SplFileObject|null $avatar Avatar - must be a PNG file, exactly 256x256 pixels, smaller than 200KB
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Account
     */
    public function avatar($avatar = null) {
        $rHeaders = $this->_headerSelector->selectHeadersForMultipart(["application/json"]);

        // Path template
        $rPath = "/account/avatar";
        
        /** @var \Kronup\Model\Account $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", $rPath, $rPath, [], $rHeaders, ["avatar" => S::fileToFormValue($avatar),]
            ), 
            "\Kronup\Model\Account"
        );
            
        return $result;
    }
    
    /**
     * Close account
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return bool
     */
    public function close() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/account";
        
        /** @var bool $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "DELETE", $rPath, $rPath, [], $rHeaders, []
            ), 
            "bool"
        );
            
        return $result;
    }
    
    /**
     * Fetch events
     *
     * @param int|1 $page_number 
     * @param int|500 $page_size 
     * @param int|1 $aggregate Aggregate notion events
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\EventsList
     */
    public function eventsList($page_number = 1, $page_size = 500, $aggregate = 1) {
        if (isset($page_number) && $page_number < 1) {
            throw new IAE('Invalid value for "$page_number" when calling AccountApi., must be bigger than or equal to 1.');
        }

        if (isset($page_size) && $page_size > 1500) {
            throw new IAE('Invalid value for "$page_size" when calling AccountApi., must be smaller than or equal to 1500');
        }

        if (isset($page_size) && $page_size < 1) {
            throw new IAE('Invalid value for "$page_size" when calling AccountApi., must be bigger than or equal to 1.');
        }

        if (isset($aggregate) && $aggregate > 1) {
            throw new IAE('Invalid value for "$aggregate" when calling AccountApi., must be smaller than or equal to 1');
        }

        if (isset($aggregate) && $aggregate < 0) {
            throw new IAE('Invalid value for "$aggregate" when calling AccountApi., must be bigger than or equal to 0.');
        }

        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/account/events";
        
        /** @var \Kronup\Model\EventsList $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", $rPath, $rPath, [
                    "pageNumber" => S::toQueryValue($page_number),
                    "pageSize" => S::toQueryValue($page_size),
                    "aggregate" => S::toQueryValue($aggregate),
                ], $rHeaders, []
            ), 
            "\Kronup\Model\EventsList"
        );
            
        return $result;
    }
    
    /**
     * Fetch account
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Account
     */
    public function read() {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], []);

        // Path template
        $rPath = "/account";
        
        /** @var \Kronup\Model\Account $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "GET", $rPath, $rPath, [], $rHeaders, []
            ), 
            "\Kronup\Model\Account"
        );
            
        return $result;
    }
    
    /**
     * Update account
     *
     * @param \Kronup\Model\PayloadAccountUpdate $payload_account_update 
     * @throws \Kronup\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * 
     * @return \Kronup\Model\Account
     */
    public function update($payload_account_update) {
        $rHeaders = $this->_headerSelector->selectHeaders(["application/json"], ["application/json"]);

        // Path template
        $rPath = "/account";
        
        /** @var \Kronup\Model\Account $result */
        $result = $this->exec(
            S::createRequest(
                $this->_sdk->config(), self::PKG, "POST", $rPath, $rPath, [], $rHeaders, [], $payload_account_update
            ), 
            "\Kronup\Model\Account"
        );
            
        return $result;
    }
    
}
